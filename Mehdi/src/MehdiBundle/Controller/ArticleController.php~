<?php

namespace MehdiBundle\Controller;

use MehdiBundle\Entity\Article;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class ArticleController extends Controller
{
			
			public function indexAction($page)
		{
			// On ne sait pas combien de pages il y a
			// Mais on sait qu'une page doit être supérieure ou égale à 1
			if ($page < 1) {
			  // On déclenche une exception NotFoundHttpException, cela va afficher
			  // une page d'erreur 404 (qu'on pourra personnaliser plus tard d'ailleurs)
			  throw new NotFoundHttpException('Page "'.$page.'" inexistante.');
			}

			// Ici, on récupérera la liste des annonces, puis on la passera au template

			// Mais pour l'instant, on ne fait qu'appeler le template
			// Notre liste d'annonce en dur
		    $listArticles = array(
		      array(
		        'title'   => 'Recherche développpeur Symfony2',
		        'id'      => 1,
		        'author'  => 'Alexandre',
		        'content' => 'Nous recherchons un développeur Symfony2 débutant sur Lyon. Blabla…',
		        'date'    => new \Datetime()),
		      array(
		        'title'   => 'Mission de webmaster',
		        'id'      => 2,
		        'author'  => 'Hugo',
		        'content' => 'Nous recherchons un webmaster capable de maintenir notre site internet. Blabla…',
		        'date'    => new \Datetime()),
		      array(
		        'title'   => 'Offre de stage webdesigner',
		        'id'      => 3,
		        'author'  => 'Mathieu',
		        'content' => 'Nous proposons un poste pour webdesigner. Blabla…',
		        'date'    => new \Datetime())
		    );

		    // Et modifiez le 2nd argument pour injecter notre liste
		    return $this->render('MehdiBundle:Article:index.html.twig', array(
		      'listArticles' => $listAdrticles
		    ));
  }
		}
		
		  /*  public function indexAction()
    {	
    	
        
         $url = $this->get('router')->generate(
            'mehdi_view', // 1er argument : le nom de la route
            array('id' => 9),   // 2e argument : les valeurs des paramètres
            true

        );
        // $url vaut « /platform/advert/5 »
        return new Response("L'URL de l'annonce d'id 5 est : ".$url);
    }
		*/

		
		public function viewAction()
		{
			$article = new Article;
			$article->setContent("Recherche développeur Symfony2.");

			return $this->render('Mehdi:Article:view.html.twig', array(
				'article' => $article
			));
		}

		public function addAction(Request $request)
		{
			// La gestion d'un formulaire est particulière, mais l'idée est la suivante :

			// Si la requête est en POST, c'est que le visiteur a soumis le formulaire
			if ($request->isMethod('POST')) {
			  // Ici, on s'occupera de la création et de la gestion du formulaire

			  $request->getSession()->getFlashBag()->add('notice', 'Annonce bien enregistrée.');

			  // Puis on redirige vers la page de visualisation de cettte annonce
			  return $this->redirect($this->generateUrl('mehdi_view', array('id' => 5)));
			}

			// Si on n'est pas en POST, alors on affiche le formulaire
			return $this->render('MehdiBundle:Article:add.html.twig');
		}

		public function editAction($id, Request $request)
		{
			// Ici, on récupérera l'annonce correspondante à $id

			// Même mécanisme que pour l'ajout
			if ($request->isMethod('POST')) {
			  $request->getSession()->getFlashBag()->add('notice', 'Annonce bien modifiée.');

			  return $this->redirect($this->generateUrl('mehdi_view', array('id' => 5)));
			}

			return $this->render('OCPlatformBundle:Advert:edit.html.twig');
		}

		public function deleteAction($id)
		{
			// Ici, on récupérera l'annonce correspondant à $id

			// Ici, on gérera la suppression de l'annonce en question

			return $this->render('MehdiBundle:Article:delete.html.twig');
		}
}
